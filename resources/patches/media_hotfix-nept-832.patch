diff --git a/media.module b/media.module
index c5516a8..369d5a3 100644
--- a/media.module
+++ b/media.module
@@ -1178,11 +1178,31 @@ function media_set_browser_params() {
   if (empty($params)) {
     // Build out browser settings. Permissions- and security-related behaviors
     // should not rely on these parameters, since they come from the HTTP query.
-    // @TODO make sure we treat parameters as user input.
-    $params = drupal_get_query_parameters() + array(
-        'types' => array(),
-        'multiselect' => FALSE,
-      );
+    // There are two ways of passing secure data:
+    // - Store the options in the 'cache_form' cache bin, using a random key
+    //   prefixed with 'media_options:'. Pass the random key in the 'options'
+    //   query argument.
+    // - Inject the options by altering the browser parameters.
+    //   @see hook_media_browser_params_alter()
+    $params = drupal_get_query_parameters();
+
+    // Filter out everything except a whitelist of known safe options.
+    $safe_options = array(
+        'activePlugins',
+        'fid',
+        'id',
+        'multiselect',
+        'options',
+        'plugins',
+        'render',
+        'types',
+    );
+    $params = array_intersect_key($params, array_flip($safe_options));
+
+    // Retrieve the security sensitive options from the cache.
+    if (!empty($params['options']) && is_string($params['options']) && $options = cache_get('media_options:' . $params['options'], 'cache_form')) {
+      $params = array_merge($options->data, $params);
+    }
 
     // Transform text 'true' and 'false' to actual booleans.
     foreach ($params as $k => $v) {
@@ -1196,6 +1216,12 @@ function media_set_browser_params() {
 
     array_walk_recursive($params, 'media_recursive_check_plain');
 
+    // Provide some default parameters.
+    $params += array(
+        'types' => array(),
+        'multiselect' => FALSE,
+    );
+
     // Allow modules to alter the parameters.
     drupal_alter('media_browser_params', $params);
   }
